generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  MENTION
  POST_REPORT
  POST_REMOVED
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  emailVerified DateTime?    // ADD THIS LINE
  name      String?
  image     String?
  profile   Profile?
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  reports   Report[]
  followers Follow[] @relation("following")
  following Follow[] @relation("followers")
  receivedNotifications Notification[] @relation("UserNotifications")
  sentNotifications Notification[] @relation("NotificationCreator")
  role      UserRole  @default(USER)
  createdAt DateTime  @default(now())

  // NextAuth.js relations
  accounts  Account[]
  sessions  Session[]
}

model Notification {
  id         String           @id @default(cuid())
  user       User             @relation("UserNotifications", fields: [userId], references: [id])
  userId     String
  creator    User             @relation("NotificationCreator", fields: [creatorId], references: [id])
  creatorId  String
  type       NotificationType
  post       Post?            @relation(fields: [postId], references: [id])
  postId     String?
  comment    Comment?         @relation(fields: [commentId], references: [id])
  commentId  String?
  read       Boolean          @default(false)
  createdAt  DateTime         @default(now())
}

model PostAnalytics {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @unique
  views     Int      @default(0)
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  headline  String?
  bio       String?
  location  String?
  website   String?
}

model Post {
  id           String         @id @default(cuid())
  author       User           @relation(fields: [authorId], references: [id])
  authorId     String
  title        String
  content      String
  tags         String[]       @default([])
  attachments  String[]       @default([])
  comments     Comment[]
  likes        Like[]
  reports      Report[]
  notifications Notification[]
  analytics    PostAnalytics?
  createdAt    DateTime       @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  notifications Notification[]
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  @@unique([postId, userId])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("followers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  @@unique([followerId, followingId])
}

model Report {
  id         String   @id @default(cuid())
  reporter   User     @relation(fields: [reporterId], references: [id])
  reporterId String
  post       Post?    @relation(fields: [postId], references: [id])
  postId     String?
  reason     String
  createdAt  DateTime @default(now())
}
